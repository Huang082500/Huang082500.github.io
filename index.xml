<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黄圣博的博客</title>
    <link>https://www.huangshengbo.com/</link>
    <description>Recent content on 黄圣博的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>m15136737050@163.com (黄圣博)</managingEditor>
    <webMaster>m15136737050@163.com (黄圣博)</webMaster>
    <lastBuildDate>Thu, 12 Dec 2019 17:08:52 +0800</lastBuildDate>
    
	<atom:link href="https://www.huangshengbo.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mask裁剪UI粒子特效</title>
      <link>https://www.huangshengbo.com/2019/12/12/learnrecord/</link>
      <pubDate>Thu, 12 Dec 2019 17:08:52 +0800</pubDate>
      <author>m15136737050@163.com (黄圣博)</author>
      <guid>https://www.huangshengbo.com/2019/12/12/learnrecord/</guid>
      <description>最近在项目遇到一个问题，加上最近刚看完 Shader 入门到精通 ，所有借此来研究一下这个问题。
核心原理 GPU 每次刷新屏幕时，会重新计算物体上的 Shader 中的顶点着色器和片面着色器，然后输出计算结果并显示到屏幕上。在计算片面着色器时，需要将材质的顶点的世界坐标和 Mask 裁剪区域的边界进行比对，判断该顶点是否在裁剪区域内，如果不是就将该顶点的透明通道设为零。
实现方式 也有类似的实现方案，这里给出我参考的两个链接：
https://www.cnblogs.com/devgl/p/6598781.html
https://www.xuanyusong.com/archives/3518
首先附上 Shader 代码，其中 add 注释下的是改动的代码。
// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt) Shader &amp;#34;Particles/Additive&amp;#34; { Properties { _TintColor (&amp;#34;Tint Color&amp;#34;, Color) = (0.5,0.5,0.5,0.5) _MainTex (&amp;#34;Particle Texture&amp;#34;, 2D) = &amp;#34;white&amp;#34; {} _InvFade (&amp;#34;Soft Particles Factor&amp;#34;, Range(0.01,3.0)) = 1.0 //add _ClipRect(&amp;#34;ClipRect&amp;#34;,Vector) = (0,0,0,0) [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (&amp;#34;Use Alpha Clip&amp;#34;, Float) = 1 //add } Category { Tags { &amp;#34;Queue&amp;#34;=&amp;#34;Transparent&amp;#34; &amp;#34;IgnoreProjector&amp;#34;=&amp;#34;True&amp;#34; &amp;#34;RenderType&amp;#34;=&amp;#34;Transparent&amp;#34; &amp;#34;PreviewType&amp;#34;=&amp;#34;Plane&amp;#34; } Blend SrcAlpha One ColorMask RGB Cull Off Lighting Off ZWrite Off SubShader { Pass { CGPROGRAM #pragma vertex vert #pragma fragment frag #pragma target 2.</description>
    </item>
    
    <item>
      <title>使用Hugo搭建静态网页</title>
      <link>https://www.huangshengbo.com/2019/11/06/hello-world/</link>
      <pubDate>Tue, 05 Nov 2019 19:57:11 +0800</pubDate>
      <author>m15136737050@163.com (黄圣博)</author>
      <guid>https://www.huangshengbo.com/2019/11/06/hello-world/</guid>
      <description>部署我的服务器流程  首先在GitHub上注册我的账号名称：huangshengbo5 接着建造我的第一项目：http://huangshengbo.github.io/ 项目建造完以后，点击设置（setting) ,跳转界面后，看到GitHubPages界面下的ChangeTheme按钮，点击进去可以选择自己中意的网页面板。 最重要的来了，就是将自己的域名和当前的GitHub工程联系在一起。首先需要在namesiol里注册账号(www.namesoil.com),然后直接选择输入自己想要的域名，一般是自己名字的英文翻译。庆幸 huangshengbo.com 这个域名还在。 接着上一步说，在我们在购买完属于自己的域名以后，在namesoil页面中点击domain manager 按钮，跳转界面后点击自己的域名按钮，选择DNS Records 左侧的Update 按钮，再次跳转界面后，在页面的中部可以看到自己域名的一些信息，选择Edit按钮，可以在Target Hostname中填写自己在GitHub中已经建好的工程名称。点击Submit按钮，就可以将自己的工程重定向到自己的域名中。  如何将本地的工程加载到GitHub上  首先需要去 https://git-scm.com 网站上下载最新的Git插件，下载好后安装运行。 如果是先在GitHub上建造了一个新的仓库，就会直接出一个界面需要你将一个本地的工程文件重定向到当前创建的GitHub库中。 实例代码：
git remote add origin https://github.com/huangshengbo5/Test.git git push -u origin master 在自己建立的本地目录下邮件可以看到GitBaskHere选项，点击会弹出一个命令行窗口，将上面的实例代码拷贝到命令行中，点击回车就将本地的目录重定向到自己的GitHub仓库中了。
  如何添加环境变量  这是Hugo的下载地址 https://github.com/gohugoio/hugo/releases 我的电脑是windows64位，所有我下载了 hugo_0.59.1_Windows-64bit.zip 版本。 我现在的需求是将 hugo 这个变量加到电脑的环境变量中。 首先右击我的电脑，点击属性，点击右侧的高级系统设置，点击弹窗下面的环境变量，点击下面的系统变量的新建按钮，在 Name 一栏中填写自己想要的变量名称，我起的是 hugo ,下面的 path 路径设置为当前下载的 Hugo.exe 可执行文件的目录的路径，点击确定。 最后还要在上述的环境变量的 path 变量中添加 Hugo.exe 可执行文件的目录的路径，方法是将文件目录路径加到 path 变量的前面，并且用 ; 分开。点击确定，就完成了。  使用Hugo搭建静态网页  cmd 命令： hugo new site myblog myblog :我的目录名称 可以下载一个Theme主题： git submodule add https://github.</description>
    </item>
    
  </channel>
</rss>